#pragma once

#include <binary.h>

typedef struct key_parameters {
	// DNSSEC fields
	uint16_t flags;
	uint8_t protocol;
	uint8_t algorithm;
	dnssec_binary_t public_key;

	// DNSSEC wire format
	dnssec_binary_t rdata;

	// Hashes
	dnssec_binary_t key_id;
	uint16_t keytag;

	// Key information
	size_t bit_size;

	// Private key parameters
	struct {
		const char *name;
		dnssec_binary_t data;
	} privkey_params[];

} key_parameters_t;

/*

RSA-SHA-256

rsa.    IN      DNSKEY  256 3 8 AwEAAa2gJM9Fe8Nsm5Fxxj+O040= ;{id = 726 (zsk), size = 128b}
rsa.    IN      DS      726 8 2 cec25bd6fd28602c73f340ae6e0515d393848708a53fe1c556efa011a1b88048

Modulus: raAkz0V7w2ybkXHGP47TjQ==
PublicExponent: AQAB
PrivateExponent: dZynkqg0wBlyGDXgC0N1wQ==
Prime1: 3Fb4jMwlb3U=
Prime2: ybm61a7bKLk=
Exponent1: 0up1teFdHFk=
Exponent2: RriWh9OFggE=
Coefficient: A3rKPJSlKlA=

*/

static const key_parameters_t SAMPLE_RSA_KEY = {
	.flags = 256,
	.protocol = 3,
	.algorithm = 8,
	.public_key = { .size = 20, .data = (uint8_t []) {
		0x03, 0x01, 0x00, 0x01, 0xad, 0xa0, 0x24, 0xcf, 0x45, 0x7b,
		0xc3, 0x6c, 0x9b, 0x91, 0x71, 0xc6, 0x3f, 0x8e, 0xd3, 0x8d,
	}},
	.rdata = { .size = 24, .data = (uint8_t []) {
		0x01, 0x00, 0x03, 0x08,
		0x03, 0x01, 0x00, 0x01, 0xad, 0xa0, 0x24, 0xcf, 0x45, 0x7b,
		0xc3, 0x6c, 0x9b, 0x91, 0x71, 0xc6, 0x3f, 0x8e, 0xd3, 0x8d,
	}},
	.key_id = { .size = 20, .data = (uint8_t []) {
		0xbb, 0xab, 0x20, 0x19, 0x68, 0xd2, 0xf4, 0x6a, 0xae, 0x88,
		0xc6, 0xc8, 0xc9, 0x68, 0x7e, 0x69, 0x00, 0x12, 0x28, 0x83,
	}},
	.keytag = 726,
	.bit_size = 128,
	.privkey_params = {
		{ "modulus", { .size = 16, .data = (uint8_t []) {
			0xad, 0xa0, 0x24, 0xcf, 0x45, 0x7b, 0xc3, 0x6c, 0x9b, 0x91,
			0x71, 0xc6, 0x3f, 0x8e, 0xd3, 0x8d,
		}}},
		{ "public_exponent", { .size = 3, .data = (uint8_t []) {
			0x01, 0x00, 0x01,
		}}},
		{ "private_exponent", { .size = 16, .data = (uint8_t []) {
			0x75, 0x9c, 0xa7, 0x92, 0xa8, 0x34, 0xc0, 0x19, 0x72, 0x18,
			0x35, 0xe0, 0x0b, 0x43, 0x75, 0xc1,
		}}},
		{ "prime_one", { .size = 8, .data = (uint8_t []) {
			0xdc, 0x56, 0xf8, 0x8c, 0xcc, 0x25, 0x6f, 0x75,
		}}},
		{ "prime_two", { .size = 8, .data = (uint8_t []) {
			0xc9, 0xb9, 0xba, 0xd5, 0xae, 0xdb, 0x28, 0xb9,
		}}},
		{ "coefficient", { .size = 8, .data = (uint8_t []) {
			0x03, 0x7a, 0xca, 0x3c, 0x94, 0xa5, 0x2a, 0x50,
		}}},
		{ NULL },
	}
};

/*

DSA-NSEC3

dsa.    IN      DNSKEY  257 3 6 ALRB7JW8C3f9YYqtgW088YMR28u/tUD9ON0VGCNjvi6OFbTvuIP+Jaen8uFCpXy7KPPUXZQiDZrCvX5Vt0nvdAuHBk2Lqi9pn5nq3aWpOeer+L9o83KQ+jmCk1v1m+ryiNOCR1g14hmD6zF3x3Vncg0hrYRplMBB8UlgQKuCoJ2ktA9pTQYai0/TvXKVlqpXi41enyKld/E1Y7yDNjxDgGPROctlj8cYbs+6yjT4BbiQWG8qPCRsbfgqiLzjplQbGGkrSD08ozntKLD7XDCrq9RJP8gm ;{id = 1203 (ksk), size = 512b}
dsa.    IN      DS      1203 6 1 27a6bdcd62d80264ad71126adf9f2200e3c87f2f

Prime(p): tUD9ON0VGCNjvi6OFbTvuIP+Jaen8uFCpXy7KPPUXZQiDZrCvX5Vt0nvdAuHBk2Lqi9pn5nq3aWpOeer+L9o8w==
Subprime(q): tEHslbwLd/1hiq2BbTzxgxHby78=
Base(g): cpD6OYKTW/Wb6vKI04JHWDXiGYPrMXfHdWdyDSGthGmUwEHxSWBAq4KgnaS0D2lNBhqLT9O9cpWWqleLjV6fIg==
Private_value(x): NpQs24BFAPht/ohmNN9ioqQ1hiE=
Public_value(y): pXfxNWO8gzY8Q4Bj0TnLZY/HGG7Puso0+AW4kFhvKjwkbG34Koi846ZUGxhpK0g9PKM57Siw+1wwq6vUST/IJg==

*/

static const key_parameters_t SAMPLE_DSA_KEY = {
	.flags = 257,
	.protocol = 3,
	.algorithm = 6,
	.public_key = { .size = 213, .data = (uint8_t []) {
		0x00, 0xb4, 0x41, 0xec, 0x95, 0xbc, 0x0b, 0x77, 0xfd, 0x61,
		0x8a, 0xad, 0x81, 0x6d, 0x3c, 0xf1, 0x83, 0x11, 0xdb, 0xcb,
		0xbf, 0xb5, 0x40, 0xfd, 0x38, 0xdd, 0x15, 0x18, 0x23, 0x63,
		0xbe, 0x2e, 0x8e, 0x15, 0xb4, 0xef, 0xb8, 0x83, 0xfe, 0x25,
		0xa7, 0xa7, 0xf2, 0xe1, 0x42, 0xa5, 0x7c, 0xbb, 0x28, 0xf3,
		0xd4, 0x5d, 0x94, 0x22, 0x0d, 0x9a, 0xc2, 0xbd, 0x7e, 0x55,
		0xb7, 0x49, 0xef, 0x74, 0x0b, 0x87, 0x06, 0x4d, 0x8b, 0xaa,
		0x2f, 0x69, 0x9f, 0x99, 0xea, 0xdd, 0xa5, 0xa9, 0x39, 0xe7,
		0xab, 0xf8, 0xbf, 0x68, 0xf3, 0x72, 0x90, 0xfa, 0x39, 0x82,
		0x93, 0x5b, 0xf5, 0x9b, 0xea, 0xf2, 0x88, 0xd3, 0x82, 0x47,
		0x58, 0x35, 0xe2, 0x19, 0x83, 0xeb, 0x31, 0x77, 0xc7, 0x75,
		0x67, 0x72, 0x0d, 0x21, 0xad, 0x84, 0x69, 0x94, 0xc0, 0x41,
		0xf1, 0x49, 0x60, 0x40, 0xab, 0x82, 0xa0, 0x9d, 0xa4, 0xb4,
		0x0f, 0x69, 0x4d, 0x06, 0x1a, 0x8b, 0x4f, 0xd3, 0xbd, 0x72,
		0x95, 0x96, 0xaa, 0x57, 0x8b, 0x8d, 0x5e, 0x9f, 0x22, 0xa5,
		0x77, 0xf1, 0x35, 0x63, 0xbc, 0x83, 0x36, 0x3c, 0x43, 0x80,
		0x63, 0xd1, 0x39, 0xcb, 0x65, 0x8f, 0xc7, 0x18, 0x6e, 0xcf,
		0xba, 0xca, 0x34, 0xf8, 0x05, 0xb8, 0x90, 0x58, 0x6f, 0x2a,
		0x3c, 0x24, 0x6c, 0x6d, 0xf8, 0x2a, 0x88, 0xbc, 0xe3, 0xa6,
		0x54, 0x1b, 0x18, 0x69, 0x2b, 0x48, 0x3d, 0x3c, 0xa3, 0x39,
		0xed, 0x28, 0xb0, 0xfb, 0x5c, 0x30, 0xab, 0xab, 0xd4, 0x49,
		0x3f, 0xc8, 0x26,
	}},
	.rdata = { .size = 217, .data = (uint8_t []) {
		0x01, 0x01, 0x03, 0x06,
		0x00, 0xb4, 0x41, 0xec, 0x95, 0xbc, 0x0b, 0x77, 0xfd, 0x61,
		0x8a, 0xad, 0x81, 0x6d, 0x3c, 0xf1, 0x83, 0x11, 0xdb, 0xcb,
		0xbf, 0xb5, 0x40, 0xfd, 0x38, 0xdd, 0x15, 0x18, 0x23, 0x63,
		0xbe, 0x2e, 0x8e, 0x15, 0xb4, 0xef, 0xb8, 0x83, 0xfe, 0x25,
		0xa7, 0xa7, 0xf2, 0xe1, 0x42, 0xa5, 0x7c, 0xbb, 0x28, 0xf3,
		0xd4, 0x5d, 0x94, 0x22, 0x0d, 0x9a, 0xc2, 0xbd, 0x7e, 0x55,
		0xb7, 0x49, 0xef, 0x74, 0x0b, 0x87, 0x06, 0x4d, 0x8b, 0xaa,
		0x2f, 0x69, 0x9f, 0x99, 0xea, 0xdd, 0xa5, 0xa9, 0x39, 0xe7,
		0xab, 0xf8, 0xbf, 0x68, 0xf3, 0x72, 0x90, 0xfa, 0x39, 0x82,
		0x93, 0x5b, 0xf5, 0x9b, 0xea, 0xf2, 0x88, 0xd3, 0x82, 0x47,
		0x58, 0x35, 0xe2, 0x19, 0x83, 0xeb, 0x31, 0x77, 0xc7, 0x75,
		0x67, 0x72, 0x0d, 0x21, 0xad, 0x84, 0x69, 0x94, 0xc0, 0x41,
		0xf1, 0x49, 0x60, 0x40, 0xab, 0x82, 0xa0, 0x9d, 0xa4, 0xb4,
		0x0f, 0x69, 0x4d, 0x06, 0x1a, 0x8b, 0x4f, 0xd3, 0xbd, 0x72,
		0x95, 0x96, 0xaa, 0x57, 0x8b, 0x8d, 0x5e, 0x9f, 0x22, 0xa5,
		0x77, 0xf1, 0x35, 0x63, 0xbc, 0x83, 0x36, 0x3c, 0x43, 0x80,
		0x63, 0xd1, 0x39, 0xcb, 0x65, 0x8f, 0xc7, 0x18, 0x6e, 0xcf,
		0xba, 0xca, 0x34, 0xf8, 0x05, 0xb8, 0x90, 0x58, 0x6f, 0x2a,
		0x3c, 0x24, 0x6c, 0x6d, 0xf8, 0x2a, 0x88, 0xbc, 0xe3, 0xa6,
		0x54, 0x1b, 0x18, 0x69, 0x2b, 0x48, 0x3d, 0x3c, 0xa3, 0x39,
		0xed, 0x28, 0xb0, 0xfb, 0x5c, 0x30, 0xab, 0xab, 0xd4, 0x49,
		0x3f, 0xc8, 0x26,
	}},
	.keytag = 1203,
	.key_id = { .size = 20, .data = (uint8_t []) {
		0x14, 0x1b, 0x2d, 0x54, 0x83, 0x74, 0x94, 0x73, 0x5b, 0x53,
		0x79, 0x5b, 0xf0, 0xc1, 0x57, 0x9b, 0xd9, 0xe1, 0x27, 0x54,
	}},
	.bit_size = 512,
	.privkey_params = {
		{ "prime", { .size = 64, .data = (uint8_t []) {
			0xb5, 0x40, 0xfd, 0x38, 0xdd, 0x15, 0x18, 0x23, 0x63, 0xbe,
			0x2e, 0x8e, 0x15, 0xb4, 0xef, 0xb8, 0x83, 0xfe, 0x25, 0xa7,
			0xa7, 0xf2, 0xe1, 0x42, 0xa5, 0x7c, 0xbb, 0x28, 0xf3, 0xd4,
			0x5d, 0x94, 0x22, 0x0d, 0x9a, 0xc2, 0xbd, 0x7e, 0x55, 0xb7,
			0x49, 0xef, 0x74, 0x0b, 0x87, 0x06, 0x4d, 0x8b, 0xaa, 0x2f,
			0x69, 0x9f, 0x99, 0xea, 0xdd, 0xa5, 0xa9, 0x39, 0xe7, 0xab,
			0xf8, 0xbf, 0x68, 0xf3,
		}}},
		{ "subprime", { .size = 20, .data = (uint8_t []) {
			0xb4, 0x41, 0xec, 0x95, 0xbc, 0x0b, 0x77, 0xfd, 0x61, 0x8a,
			0xad, 0x81, 0x6d, 0x3c, 0xf1, 0x83, 0x11, 0xdb, 0xcb, 0xbf,
		}}},
		{ "base", { .size = 64, .data = (uint8_t []) {
			0x72, 0x90, 0xfa, 0x39, 0x82, 0x93, 0x5b, 0xf5, 0x9b, 0xea,
			0xf2, 0x88, 0xd3, 0x82, 0x47, 0x58, 0x35, 0xe2, 0x19, 0x83,
			0xeb, 0x31, 0x77, 0xc7, 0x75, 0x67, 0x72, 0x0d, 0x21, 0xad,
			0x84, 0x69, 0x94, 0xc0, 0x41, 0xf1, 0x49, 0x60, 0x40, 0xab,
			0x82, 0xa0, 0x9d, 0xa4, 0xb4, 0x0f, 0x69, 0x4d, 0x06, 0x1a,
			0x8b, 0x4f, 0xd3, 0xbd, 0x72, 0x95, 0x96, 0xaa, 0x57, 0x8b,
			0x8d, 0x5e, 0x9f, 0x22,
		}}},
		{ "private_x", { .size = 20, .data = (uint8_t []) {
			0x36, 0x94, 0x2c, 0xdb, 0x80, 0x45, 0x00, 0xf8, 0x6d, 0xfe,
			0x88, 0x66, 0x34, 0xdf, 0x62, 0xa2, 0xa4, 0x35, 0x86, 0x21,
		}}},
		{ "private_y", { .size = 64, .data = (uint8_t []) {
			0xa5, 0x77, 0xf1, 0x35, 0x63, 0xbc, 0x83, 0x36, 0x3c, 0x43,
			0x80, 0x63, 0xd1, 0x39, 0xcb, 0x65, 0x8f, 0xc7, 0x18, 0x6e,
			0xcf, 0xba, 0xca, 0x34, 0xf8, 0x05, 0xb8, 0x90, 0x58, 0x6f,
			0x2a, 0x3c, 0x24, 0x6c, 0x6d, 0xf8, 0x2a, 0x88, 0xbc, 0xe3,
			0xa6, 0x54, 0x1b, 0x18, 0x69, 0x2b, 0x48, 0x3d, 0x3c, 0xa3,
			0x39, 0xed, 0x28, 0xb0, 0xfb, 0x5c, 0x30, 0xab, 0xab, 0xd4,
			0x49, 0x3f, 0xc8, 0x26,
		}}},
		{ NULL },
	}
};

/*

ECDSA-P256-SHA256

ecdsa. IN DNSKEY 256 3 13 8uD7C4THTM/w7uhryRSToeE/jKT78/p853RX0L5EwrZrSLBubLPiBw7g bvUP6SsIga5ZQ4CSAxNmYA/gZsuXzA==
ecdsa. IN DS 5345 13 1 954103AC7C43810CE9F414E80F30AB1CBE49B236
ecdsa. IN DS 5345 13 2 BAC2107036E735B50F85006CE409A19A3438CAB272E70769EBDA032239A3D0CA

PrivateKey: iyLIPdk3DOIxVmmSYlmTstbtUPiVlEyDX46psyCwNVQ=

*/

static const key_parameters_t SAMPLE_ECDSA_KEY = {
	.flags = 256,
	.protocol = 3,
	.algorithm = 13,
	.public_key = { .size = 64, .data = (uint8_t []) {
		0xf2, 0xe0, 0xfb, 0x0b, 0x84, 0xc7, 0x4c, 0xcf, 0xf0, 0xee,
		0xe8, 0x6b, 0xc9, 0x14, 0x93, 0xa1, 0xe1, 0x3f, 0x8c, 0xa4,
		0xfb, 0xf3, 0xfa, 0x7c, 0xe7, 0x74, 0x57, 0xd0, 0xbe, 0x44,
		0xc2, 0xb6, 0x6b, 0x48, 0xb0, 0x6e, 0x6c, 0xb3, 0xe2, 0x07,
		0x0e, 0xe0, 0x6e, 0xf5, 0x0f, 0xe9, 0x2b, 0x08, 0x81, 0xae,
		0x59, 0x43, 0x80, 0x92, 0x03, 0x13, 0x66, 0x60, 0x0f, 0xe0,
		0x66, 0xcb, 0x97, 0xcc,
	}},
	.rdata = { .size = 68, .data = (uint8_t []) {
		0x01, 0x00, 0x03, 0x0d,
		0xf2, 0xe0, 0xfb, 0x0b, 0x84, 0xc7, 0x4c, 0xcf, 0xf0, 0xee,
		0xe8, 0x6b, 0xc9, 0x14, 0x93, 0xa1, 0xe1, 0x3f, 0x8c, 0xa4,
		0xfb, 0xf3, 0xfa, 0x7c, 0xe7, 0x74, 0x57, 0xd0, 0xbe, 0x44,
		0xc2, 0xb6, 0x6b, 0x48, 0xb0, 0x6e, 0x6c, 0xb3, 0xe2, 0x07,
		0x0e, 0xe0, 0x6e, 0xf5, 0x0f, 0xe9, 0x2b, 0x08, 0x81, 0xae,
		0x59, 0x43, 0x80, 0x92, 0x03, 0x13, 0x66, 0x60, 0x0f, 0xe0,
		0x66, 0xcb, 0x97, 0xcc,
	}},
	.keytag = 5345,
	.key_id = { .size = 20, .data = (uint8_t []) {
		0x47, 0xfd, 0x10, 0x01, 0x1e, 0x76, 0xcc, 0x67, 0x41, 0xaf,
		0x58, 0x60, 0x41, 0xea, 0xe5, 0x51, 0x94, 0x65, 0xfc, 0x8d,
	}},
	.bit_size = 256,
	.privkey_params = {
		{ "private_key", { .size = 32, .data = (uint8_t []) {
			0x8b, 0x22, 0xc8, 0x3d, 0xd9, 0x37, 0x0c, 0xe2, 0x31, 0x56,
			0x69, 0x92, 0x62, 0x59, 0x93, 0xb2, 0xd6, 0xed, 0x50, 0xf8,
			0x95, 0x94, 0x4c, 0x83, 0x5f, 0x8e, 0xa9, 0xb3, 0x20, 0xb0,
			0x35, 0x54,
		}}},
		{ NULL },
	}
};
