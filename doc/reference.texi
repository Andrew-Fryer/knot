@node Knot DNS Configuration Reference, , Statement Index, Top
@appendix Knot DNS Configuration Reference

This reference describe every configuration option in Knot DNS.

@menu
* system::                      
* keys::                        
* interfaces::                  
* remotes::                     
* zones::                       
* log::                         
@end menu

@node system
@section @code{system} Statement
@stindex system

The @code{system} statement contains general options related to the
operating system and other general options which don't fit anywhere
else.

@menu
* system Syntax::               
* system Statement Definition and Usage::  
* system Example::              
@end menu

@node system Syntax
@subsection @code{system} Syntax

@example
@code{system} @code{@{}
  [ @code{identity} @code{"}@kbd{string}@code{";} ]
  [ @code{version} @code{"}@kbd{string}@code{";} ]
  [ @code{nsid} ( @code{"}@kbd{string}@code{"} | @kbd{hex_string} )@code{;} ]
  [ @code{storage} @code{"}@kbd{string}@code{";} ]
  [ @code{pidfile} @code{"}@kbd{string}@code{";} ]
  [ @code{workers} @kbd{integer}@code{;} ]
  [ @code{user} @kbd{string}[@code{.}@kbd{string}]@code{;} ]
@code{@}}
@end example

@node system Statement Definition and Usage
@subsection Statement Definition and Usage

@menu
* identity::                    
* version::                     
* nsid::                        
* storage::                     
* pidfile::                     
* workers::                     
* user::                        
@end menu

@node identity
@subsubsection identity
@vindex identity

Identity of the server (see @url{http://tools.ietf.org/html/rfc4892,RFC 4892}). Not used yet.

@example
system @{
  identity "Knot DNS";
@}
@end example

@node version
@subsubsection version
@vindex version

Version of the server (see @url{http://tools.ietf.org/html/rfc4892,RFC 4892}). Not used yet.

@example
system @{
  version "1.0.5";
@}
@end example

@node nsid
@subsubsection nsid
@vindex nsid

DNS Name Server Identifier (see @url{http://tools.ietf.org/html/rfc5001,RFC 5001}).

Use a string format "text" or a hexstring f.e. 0x01ab00

@example
system @{
  nsid 0x00cafe;
@}
@end example

@node storage
@subsubsection storage
@vindex storage

The working directory of the Knot DNS, it is used to store compiled zone files and it's also a default location of the pidfile.

@example
system @{
  storage "/var/lib/knot";
@}
@end example

@node pidfile
@subsubsection pidfile
@vindex pidfile

Custom pidfile location.

Default value: @file{knot.pid} in @code{@ref{storage}} directory.

@example
system @{
  pidfile "/var/run/knot.pid";
@}
@end example

@node workers
@subsubsection workers
@vindex workers

Number of workers (threads) per interface.  This option is used to
force number of threads used per interface.

Default value: unset (auto-estimates optimal value from the number of online CPUs)

@example
system @{
  workers: 16;
@}
@end example

@node user
@subsubsection user
@vindex user

System @kbd{user} or @kbd{user}.@kbd{group} under which the Knot DNS
is run after starting and binding to interfaces.

Default value: root.root

@example
system @{
  user knot.knot;
@}
@end example

@node system Example
@subsection Example

@example
system @{
  version "@value{VERSION}";
  nsid    "amaterasu";
  storage "/var/lib/knot";
@}
@end example

@node keys
@section @code{keys} Statement
@stindex keys

The @code{keys} statement sets up the TSIG keys used to authenticate
zone transfers.

@menu
* keys Syntax::                 
* keys Statement Definition and Usage::  
* Example::                     
@end menu

@node keys Syntax
@subsection keys Syntax

@example
keys @{
  key_id algorithm "string"; ]
  [ key_id algorithm "string"; ... ]
@}
@end example

@node keys Statement Definition and Usage
@subsection Statement Definition and Usage

@menu
* key_id::                      
@end menu

@node key_id
@subsubsection @code{key_id} Statement
@vindex key_id

The @kbd{key_id} statement defines a secret shared key for use with
TSIG.  It consists of its name, algorithm and key contents.

Supported algoritms:

@multitable @columnfractions 1
@item
hmac-md5
@item
hmac-sha1
@item
hmac-sha224
@item
hmac-sha256
@item
hmac-sha384
@item
hmac-sha512
@end multitable

You will need to use bind or ldns utils to generate TSIG keys.  Knot DNS doesn't have it's own generation utilities yet.

@example

$ dnssec-keygen -a HMAC-SHA256 -b 256 -n HOST foobar.example.com
Kfoobar.example.com.+163+21239
$ cat Kfoobar.example.com.+163+21239.key 
foobar.example.com. IN KEY 512 3 163 rqv2WRyDgIUaHcJi03Zssor9jtG1kOpb3dPywxZfTeo=
	  
@end example

Key generated in previous paragraph would be written as:

@example

keys @{
  foobar.example.com. hmac-sha256 "rqv2WRyDgIUaHcJi03Zssor9jtG1kOpb3dPywxZfTeo=";
@}
	  
@end example

@node Example
@subsection Example


@example

keys @{
  key0.server0 hmac-md5 "Wg==";
  foobar.example.com. hmac-sha256 "RQ==";
@}
	
@end example

@node interfaces
@section interfaces
@stindex interfaces

The @code{interfaces} statement contains IP interfaces where Knot DNS listens for incoming queries.

@menu
* interfaces Syntax::           
* interfaces Statement Definition and Usage::  
* interfaces Examples::         
@end menu

@node interfaces Syntax
@subsection Syntax

@example
@code{interfaces} @code{@{}
  @kbd{interface_id}
    ( @kbd{ip_address}[@@@kbd{port_number}] |
      @code{@{} @code{address} @kbd{ip_address}@code{;} [ @code{port} @kbd{port_number}@code{;} ] @code{@}} )
  [ @kbd{interface_id ...}@code{;} @kbd{...}@code{;} ]
@code{@}}
@end example

@node interfaces Statement Definition and Usage
@subsection Statement Definition and Usage

@menu
* interface_id::                
@end menu

@node interface_id
@subsubsection @kbd{interface_id}
@vindex interface_id

The @kbd{interface_id} is a textual identifier of an IP interface,
which consists of IP address and port.

The definition of interface can be written in long or a short form and
it has always contain and IP (IPv4 or IPv6) address.

@node interfaces Examples
@subsection interfaces Examples

Long form:

@example

interfaces @{
  my_ip @{
    address 192.0.2.1;
    port 53;
  @}
@}
	
@end example

Short form:

@example

interfaces @{
  my_second_ip 198.51.100.1@@53;
@}
	
@end example

Short form without port (defaults to 53):

@example

interfaces @{
  my_third_ip 203.0.113.1;
@}
	
@end example

@node remotes
@section @code{remotes} Statement
@stindex remotes

The @code{remotes} statement sets up all remote servers for zone
transfers.  Knot DNS doesn't distinguish between client or server in
this section.  Role of the server is determined at the time of its
usage in the @code{@ref{zones}} section.  One server may act as a
client for one zone (e.g. downloading the updates) and as a master
server for different zone.

@menu
* remotes Syntax::              
* remotes Statement Definition and Grammar::  
@end menu

@node remotes Syntax
@subsection Syntax

@example
@code{remotes} @code{@{}
  @kbd{remote_id}
    ( @kbd{ip_address}[@code{@@}@kbd{port_number}] |
      @code{@{}   @code{address} @kbd{ip_address};
         [ @code{port} @kbd{port_number}; ]
         [ @code{key} @kbd{key_id}; ]
         [ @code{via} [ @kbd{interface_id} | @kbd{ip_address} ]; ]
      @code{@}}
    )
  [ @kbd{remote_id} @dots{}; @dots{}; ]
@code{@}}
@end example

@node remotes Statement Definition and Grammar
@subsection Statement Definition and Grammar

@menu
* remote_id::
* address::
* port::
* key::
* via::
@end menu

@node remote_id
@subsubsection @kbd{remote_id}
@vindex remote_id

@kbd{remote_id} contains a symbolic name for a remote server.

@node address
@subsubsection address
@vindex address

@kbd{address} sets an IPv4 or IPv6 address for this particular @code{remote}.

@node port
@subsubsection port
@vindex port

@code{port} section contains a port number for current @code{remote}.

@node key
@subsubsection key
@vindex key

@code{key} section contains a key associated with this @code{remote}.

@node via
@subsubsection via
@vindex via

@code{via} section specifies which interface will be used to comunnicate with this @code{remote}.

@node zones
@section @code{zones} Statement

The @code{zones} statement contains definition of zones served by Knot DNS.

@menu
* zones Syntax::                
* zones Semantic checks::     
* zones Statement Definition and Grammar::  
@end menu

@node zones Syntax
@subsection Syntax

@example
@code{zones} @code{@{}
  [ @kbd{zone_options} ]
  @kbd{zone_id} @code{@{}
    @code{file} @code{"}@kbd{string}@code{";}
    [ @code{xfr-in} @kbd{remote_id} [, @kbd{remote_id}, @dots{} ]@code{;} ]
    [ @code{xfr-out} @kbd{remote_id} [, @kbd{remote_id}, @dots{} ]@code{;} ]
    [ @code{notify-in} @kbd{remote_id} [, @kbd{remote_id}, @dots{} ]@code{;} ]
    [ @code{notify-out} @kbd{remote_id} [, @kbd{remote_id}, @dots{} ]@code{;} ]
    [ @kbd{zone_options} ]
  @code{@}}
@code{@}}

@kbd{zone_options} :=
  [ @code{semantic-checks} @kbd{boolean}@code{;} ]
  [ @code{ixfr-from-differences} @kbd{boolean}@code{;} ]
  [ @code{disable-any} @kbd{boolean}@code{;} ]
  [ @code{notify-timeout} @kbd{integer}@code{;} ]
  [ @code{notify-retries} @kbd{integer}@code{;} ]
  [ @code{zonefile-sync} ( @kbd{integer} | @kbd{integer}(@code{s} | @code{m} | @code{h} | @code{d})@code{;} ) ]
  [ @code{ixfr-fslimit} ( @kbd{integer} | @kbd{integer}(@code{k} | @code{M} | @code{G}) )@code{;} ]
  [ @code{ixfr-from-differences} @kbd{boolean}@code{;} ]
@end example

@node zones Statement Definition and Grammar
@subsection Statement Definition and Grammar

@menu
* zone_id::
* file::
* xfr-in::                    
* xfr-out::                     
* notify-in::                        
* notify-out::                     
* semantic-checks::                     
* ixfr-from-differences::
* disable-any::                     
* notify-timeout::                     
* notify-retries::                     
* zonefile-sync::                    
* ixfr-fslimit::                     
@end menu

@node zone_id
@subsubsection @kbd{zone_id}
@vindex zone_id

@code{zone_id} is zone origin, and as such is a domain name that may or may not end with a ".".
If no $ORIGIN directive is inside actual zone file, this domain name will be used in place of "@".

@node file
@subsubsection file
@vindex file

After @code{file} statement comes path to zone file. You can use either full or relative path, with relative
path's origin in @ref{storage} directory.

@node xfr-in
@subsubsection xfr-in
@vindex xfr-in

In @code{xfr-in} statement user specifies which remotes will be permited to perform a zone transfer to update the zone.
Remotes are defined in @ref{remotes}.

@node xfr-out
@subsubsection xfr-out
@vindex xfr-out

In @code{xfr-out} statement user specifies which remotes will be permited to obtain zone's contents via zone transfer.
Remotes are defined in @ref{remotes}.

@node notify-in
@subsubsection notify-in
@vindex notify-in

@code{notify-in} defines which remotes will be permited to send NOTIFY for this particular zone.

@node notify-out
@subsubsection notify-out
@vindex notify-out

@code{notify-out} defines to which remotes will your server send NOTIFYs about this particular zone.

@node semantic-checks
@subsubsection semantic-checks
@vindex semantic-checks 

@code{semantic-checks} statement turns on optional semantic checks for this particular zone.
See @ref{zones Semantic checks} for more information. Possible values are @code{on} and @code{off}.
Disabled by default.

@node ixfr-from-differences
@subsubsection ixfr-from-differences
@vindex ixfr-from-differences

EXPERIMENTAL: @code{ixfr-from-differences} is only relevant if you are running Knot as a master for this zone.
By turning this on you will tell Knot to create changesets from changes you made to a zone file upon server reload.
See @ref{Controlling running daemon} for more information. Possible values are @code{on} and @code{off}. Disabled by default.

@node disable-any
@subsubsection disable-any
@vindex disable-any

If you enable @code{disable-any}, all ANY queries over UDP will be answered with empty response and with the TC bit set.
Use to minimize risk of DNS replay attack. Disabled by default.

@node notify-timeout
@subsubsection notify-timeout
@vindex notify-timeout

@code{notify-timeout} in seconds specifies how long will server wait for NOTIFY response. Possible values are 1 to INT_MAX.
Default value is 60 seconds.

@node notify-retries
@subsubsection notify-retries
@vindex notify-retries

@code{notify-retries} tells the server how many times it can retry to send a NOTIFY. Possible values 
are 1 to INT_MAX and default value is 5.

@node zonefile-sync
@subsubsection zonefile-sync
@vindex zonefile-sync

@code{zonefile-sync} is only relevant in slave server scenario. It is a time after which current zone in memory will be synced
to its file on a disk (as set in @ref{file}). Possible values are 1 to INT_MAX, optionally suffixed by unit size (s/m/h/d) - 1s is one socond, 1m one minute, 1h one hour and 1d one day with default value set to 1h.

@node ixfr-fslimit
@subsubsection ixfr-fslimit
@vindex ixfr-fslimit

@code{ixfr-fslimit} sets a maximum size for zone's journal. Possible values are 1 to INT_MAX, with optional suffixes k, m and G. I.e. 1k, 1m and 1G with default value not being set, meaning that journal file can grow without limitations.

@node zones Semantic checks 
@subsection List of zone semantic checks

The @code{semantic-checks} statement turns on extra zone file semantic
checks on. Several checks are enabled on default and cannot be turned
off. If an error is found using these mandatory checks, the zone file
will not be loaded. Upon loading a zone file, occured
error and counts of their occurence will be logged to stderr.
These checks are the following:

@example
- An extra record together with CNAME record (except for RRSIG and DS)
- CNAME link chain length greater than 10 (including infinite cycle)
- DNAME and CNAME records under the same owner (RFC 2672)
- CNAME and DNAME wildcards pointing to themselves
- SOA record missing in zone (RFC 1034)
- DNAME records having records under it (DNAME children) (RFC 2672)
@end example

Following checks have to be turned on using @code{semantic-checks} and
a zone containing following errors will be 
loaded even upon discovering an error:

@example
- Missing NS record in delegation point or at the zone apex
- Missing glue A or AAAA records
- Broken or non-cyclic NSEC(3) chain
- Wrong NSEC(3) type bitmap
- Multiple NSEC records at the same node
- Missing NSEC records at authoritative nodes
- Extra record types under same name as NSEC3 record
(this is RFC-valid, but Knot will not serve such a zone correctly)
- NSEC3-unsecured delegation that is not part of Opt-out span
- Wrong original TTL value in NSEC3 records
- Wrong type covered RDATA value in RRSIG record
- Wrong RDATA TTL value in RRSIG record
- Signer name not the same as in DNSKEY
- Signed RRSIG
- Not all RRs in node are signed
- Wrong key flags or wrong key in RRSIG record
@end example

@node log
@section @code{log} Statement
@stindex log

@menu
* log Syntax::                  
* log Statement Definition and Grammar::  
@end menu

@node log Syntax
@subsection Syntax

@example
@code{log} @code{@{}
  @kbd{log_name} @code{@{}
    [ @kbd{category} @kbd{severity} [ @kbd{severity} @dots{} ]@code{;} ]
    [ @code{file} @kbd{filename} @kbd{severity} [ @kbd{severity} @dots{} ]@code{;} ]
  @code{@}}
@code{@}}

@end example

@node log Statement Definition and Grammar
@subsection Statement Definition and Grammar

The @code{log} statement configures logging output of Knot DNS.  You
can configure Knot DNS to log into file or system log.  Each log
message has it's priority and you can configure priorities for each
log destination.


